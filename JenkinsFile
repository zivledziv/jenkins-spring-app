pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/zivledziv/jenkins-spring-app.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://35.211.10.188:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "zivlederer/best-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "jenkins-argo-manifests"
            GIT_USER_NAME = "zivledziv"
            GIT_USER_EMAIL = "zivledziv@gmail.com"
        }
        steps {
            withCredentials([string(credentialsId: 'github-zivledziv', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config --global user.email "${GIT_USER_EMAIL}"
                    git config --global user.name "${GIT_USER_NAME}"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    if [ -d ${GIT_REPO_NAME} ]; then
                        cd ${GIT_REPO_NAME}
                        git pull origin main
                    else
                        git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}
                    fi
                    cd /var/lib/jenkins/workspace/jenkinsDemo/${GIT_REPO_NAME}
                    sed "s/{{TAG}}/${BUILD_NUMBER}/g" deployment-template.yaml > deployment.yml
                    git add deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    
                '''
            }
        }
    }
  }
  post {
    always {
      script {
        currentBuild.result = currentBuild.result ?: 'SUCCESS'
        slackSend(
          color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
          message: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) has completed. Result: ${currentBuild.result}",
          channel: '#cicd-jenkins',
          teamDomain: 'DevOpsTeam',
          tokenCredentialId: 'slack-token'
        )
      }
    }
  }
}
